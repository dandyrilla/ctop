#!/bin/bash


# settings
CTOP_DIR="/home/sonic/bin/ctop-2.0" # absolute path to the ctop directory
SCRIPT="$CTOP_DIR/ctop"             # path to ctop script
NODELIST="$CTOP_DIR/nodes"          # path to nodes information


# colors
esc0="\e[0m"     # reset all
esc1="\e[47;30m" # white bg, black fg
escA="\e[1;30m"  # gray
escR="\e[1;31m"  # red
escG="\e[1;32m"  # green
escY="\e[1;33m"  # yellow
escB="\e[1;34m"  # blue
escM="\e[1;35m"  # magenta
escC="\e[1;36m"  # cyan


max() {
    echo $@ | tr " " "\n" | sort -n | head -1
}


min() {
    echo $@ | tr " " "\n" | sort -n | tail -1
}


repeat() {
    chr=$1
    len=$2
    printf "%${len}s" | tr " " "${chr}"
}


check_nodelist() {
    if [ ! -f "$NODELIST" ]; then
        echo "error: nodes file not exist."
        exit 1
    fi
}


onchange_termsize() {
    clear
    # ncols=$(tput cols)
    # nrows=$(tput lines)
    # echo "term size changed: ${ncols} x ${nrows}"
}


onpress_interrupt() {
    : # do nothing
}


stat1=
stat2=
usage1=
get_cpu_usage() {
    # cpu usage information

    size=$1

    read cpu stat </proc/stat

    if [ "$stat1" = "" ]; then
        stat1=($stat)
        usleep 100000
        get_cpu_usage $size
    else
        stat2=( $stat )

        # jiffies
        total=0
        jifs=()  # us, ni, sy, id, wa, hi, si
        for i in {0..6}; do
            jif=$((stat2[$i] - stat1[$i]))
            jifs+=($jif)
            total=$((total + jif))
        done

        us=$(( size * jifs[0] / total ))
        ni=$(( size * jifs[1] / total ))
        sy=$(( size * jifs[2] / total ))
        wa=$(( size * jifs[4] / total ))
        id=$(( size - us - ni - sy - wa ))

        stat1=( ${stat2[@]} )
        usage1=( $us $ni $sy $wa $id )
    fi
}


bar_cpu_usage() {
    # display cpu usage as a bar

    # bars (us, ni, sy, wa) and grid (remaining)
    colors=($escG $escY $escC $escB $escA)
    chars=("#" "#" "#" "#" "-")
    for i in {0..4}; do
        size=$1
        shift
        if [ "$size" -gt 0 ]; then
            color=${colors[$i]}
            char=${chars[$i]}
            echo -n "$color$(repeat "$char" $size)"
        fi
    done

    # restore color
    echo -n "$esc0"
}


usage2=
get_mem_usage() {
    # memory usage information

    size=$1

    meminfo=( $( awk '{
        if (/^MemTotal:/) {total=$2};
        if (/^MemFree:/) {free=$2};
        if (/^Buffers:/) {buffer=$2};
        if (/^Cached:/) {cache1=$2};
        if (/^SReclaimable:/) {cache2=$2};
        if (cache1 && cache2) {cache=cache1+cache2};
        if (total && free && buffer && cache ) {print total" "free" "buffer" "cache; exit};
    }' /proc/meminfo ) )

    kb_total=${meminfo[0]}
    kb_free=${meminfo[1]}
    kb_buffcache=$(( meminfo[2] + meminfo[3] ))
    kb_used=$(( kb_total - kb_free - kb_buffcache ))

    used=$(( size * kb_used / kb_total ))
    buffcache=$(( size * kb_buffcache / kb_total ))
    free=$(( size - used - buffcache ))

    usage2=( $used $buffcache $free )
}


bar_mem_usage() {
    # display mem usage as a bar

    # bars (used, buffcache) and grid (free)
    colors=($escR $escA $escA)
    chars=("#" "#" "-")
    for i in {0..2}; do
        size=$1
        shift
        if [ "$size" -gt 0 ]; then
            color=${colors[$i]}
            char=${chars[$i]}
            echo -n "$color$(repeat "$char" $size)"
        fi
    done

    # restore color
    echo -n "$esc0"
}


loop_node() {

    r0=$( grep -v "^#" $NODELIST | awk '{print $2}' | sort -n | tail -1 )
    r0=$(( r0 + 2 ))

    nodeinfo=( $( grep -m 1 "^$HOSTNAME " $NODELIST ) )
    if [ "$nodeinfo" = "" ]; then
        exit 1
    fi

    r=${nodeinfo[1]}
    c=${nodeinfo[2]}
    size0=${nodeinfo[3]}
    size1=${nodeinfo[4]}
    size2=${nodeinfo[5]}

    while true; do

        # name of the node
        name=$( printf "%${size0}s" "${HOSTNAME::$size0}" )

        # get cpu/mem usage
        get_cpu_usage $size1
        get_mem_usage $size2

        # bars
         bar1="$( bar_cpu_usage ${usage1[@]} )"
         bar2="$( bar_mem_usage ${usage2[@]} )"

        # print bars
        cur1="\e[${r};${c}H"
        cur2="\e[${r0};1H"
        bar="$name [$bar1|$bar2]"
        echo -ne "$cur1$bar$cur2"

        sleep 1
    done
}


child_pids=
draw() {
    # init child processes
    child_pids=()

    # ssh
    nodes=$( grep -v "^#" $NODELIST | awk '{print $1}' )
    for node in $nodes; do
        ssh $node "$SCRIPT node" &
        child_pids+=($!)
    done
}


teardown() {
    # kill child processes
    if [ "${#child_pids[@]}" -gt 0 ]; then
        kill -9 ${child_pids[@]}
    fi
}


loop() {
    exec 2> /dev/null
    clear
    draw
    while true; do
        read -rsn 1 key
        if [ "$key" == "q" ]; then
            teardown
            break
        fi
    done
}


cmd=$1
case $cmd in
    "node")
        # start main loop
        loop_node  # node mode
        ;;
    *)
        # check node list file
        check_nodelist

        # register events
        trap onchange_termsize SIGWINCH
        trap onpress_interrupt SIGINT

        # start main loop
        loop  # master mode
        ;;
esac
